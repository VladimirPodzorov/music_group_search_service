import json
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

from tg_bot.keyboards.kb import ButtonText, get_skip_kb, get_on_start_kb
from tg_bot.request_client.client import Client
from .fsm_form import FormBand

router = Router()

@router.message(Command("group_profile"))
async def create_profile_band(message: Message, state: FSMContext):
    await state.set_state(FormBand.name)
    await message.answer("–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞?",
                         reply_markup=ReplyKeyboardRemove())


@router.message(FormBand.name)
async def add_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(FormBand.musical_genre)
    await message.answer("–í –∫–∞–∫–æ–º —Å—Ç–∏–ª–µ –∏–≥—Ä–∞–µ—Ç –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞?")


@router.message(FormBand.musical_genre)
async def add_genre(message: Message, state: FSMContext):
    await state.update_data(musical_genre=message.text)
    await state.set_state(FormBand.who_need)
    await message.answer("–ö—Ç–æ –≤–∞–º –Ω—É–∂–µ–Ω?")


@router.message(FormBand.who_need)
async def add_who(message: Message, state: FSMContext):
    await state.update_data(who_need=message.text)
    await state.set_state(FormBand.info)
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø–µ.\n"
                         "–ù–∞–ø—Ä–∏–º–µ—Ä: —Å–∫–æ–ª—å–∫–æ –µ–π –ª–µ—Ç.\n"
                         "–ò–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'‚¨áÔ∏è",
                         reply_markup=get_skip_kb())


@router.message(FormBand.info, F.text)
async def add_info(message: Message, state: FSMContext):
    if message.text == ButtonText.SKIP:
        await state.update_data(info="")
    else:
        await state.update_data(info=message.text)
    await state.set_state(FormBand.sample)
    await message.answer(
        text="–û—Ç–ø—Ä–∞–≤—å –Ω–µ–±–æ–ª—å—à–æ–π –∞—É–¥–∏–æ —Å—ç–º–ø–ª —Å–≤–æ–µ–π –∏–≥—Ä—ã.\n"
             "–ò–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'‚¨áÔ∏è",
        reply_markup=get_skip_kb()
    )


@router.message(FormBand.info)
async def handle_invalid_info(message: Message):
    await message.answer("–ü—Ä–æ—Å—Ç–∏. –ù–æ —Ç—É—Ç –Ω–∞–¥–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.\n"
                         "–ó–∞–ø–æ–ª–Ω–∏ –∏–Ω—Ñ–æ –µ—â–µ —Ä–∞–∑.\n"
                         "–ò–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'‚¨áÔ∏è",
                         reply_markup=get_skip_kb())


@router.message(FormBand.sample, F.audio)
async def add_sample(message: Message, state: FSMContext):
    audio_id = message.audio.file_id
    data = await state.update_data(sample=audio_id)
    await state.clear()
    user_tg = message.from_user.id
    data.setdefault("user_tg", user_tg)
    client = Client()
    json_data = json.dumps(data, ensure_ascii=False)
    response_text = client.add_band(json_data)
    await message.answer(
        text=f'{response_text}\n'
             f'–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏—Å–∫–∞—Ç—å –º—É–∑—ã–∫–∞–Ω—Ç–∞üòâ\n'
             f'–£–¥–∞—á–∏! –ñ–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É ‚¨áÔ∏è',
        reply_markup=get_on_start_kb()
    )


@router.message(FormBand.sample, F.text == ButtonText.SKIP)
async def add_sample(message: Message, state: FSMContext):
    data = await state.update_data(sample="")
    await state.clear()
    user_tg = message.from_user.id
    data.setdefault("user_tg", user_tg)
    client = Client()
    json_data = json.dumps(data, ensure_ascii=False)
    response_text = client.add_band(json_data)
    await message.answer(
        text=f'{response_text}\n'
             f'–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏—Å–∫–∞—Ç—å –º—É–∑—ã–∫–∞–Ω—Ç–∞üòâ\n'
             f'–£–¥–∞—á–∏! –ñ–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É ‚¨áÔ∏è',
        reply_markup=get_on_start_kb()
    )


@router.message(FormBand.sample)
async def handle_invalid_sample(message: Message):
    await message.answer(
        text="–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª.\n"
             "–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑.\n"
             "–ò–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'‚¨áÔ∏è",
        reply_markup=get_skip_kb()
    )
